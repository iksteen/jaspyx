#! /usr/bin/env python

import ast
import os
from jaspyx.visitor import DefaultVisitor


if __name__ == '__main__':
    import sys

    if len(sys.argv) < 2:
        print >> sys.stderr, 'Syntax: %s <input>' % sys.argv[0]
        sys.exit(1)
    registry = {}

    import_path, main = os.path.split(sys.argv[1])
    if os.path.isdir(sys.argv[1]) and os.path.exists(os.path.join(sys.argv[1], '__init__.jpx')):
        c = ast.parse('import ' + main)
        registry['__main__'] = v = DefaultVisitor('__main__', registry, indent=8)
    else:
        c = ast.parse(open(sys.argv[1]).read(), sys.argv[1])
        registry['__main__'] = v = DefaultVisitor(sys.argv[1], registry, indent=8)
    v.import_path = [import_path]
    v.visit(c)

    print '''(function() {
  function __import__(__module__, module_name) {
    var modules = __module__.__modules__,
        module = modules[module_name];
    if(typeof module == 'undefined') {
      var module_path = module_name.split('.'),
          registry = __module__.__registry__,
          s, p;
      for(var i = 0; i < module_path.length; ++i) {
        s = module_path.slice(0, i + 1).join('.');
        module = modules[s];
        if(typeof module == 'undefined') {
          module = modules[s] = {
            '__modules__': modules,
            '__registry__': registry
          };
          if(p) {
            modules[p][module_path[i]] = module;
          }
          registry[s](module);
        }
        p = s;
      }
    }
    return module;
  }
  var modules = {},
      registry = {'''
    for module, body in registry.items():
        print '        "%s": %s,' % (module, str(body.module))
    print '''  };
  modules["__main__"] = {
    "__modules__": modules,
    "__registry__": registry,
  };
  registry["__main__"](modules["__main__"]);
})();'''
